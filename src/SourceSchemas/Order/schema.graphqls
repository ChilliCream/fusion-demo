schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CreateOrderPayload {
  order: Order
}

type Mutation {
  createOrder(input: CreateOrderInput!): CreateOrderPayload! @cost(weight: "10")
}

type Order implements Node {
  user: User!
  id: ID!
  items: [OrderItem!]!
  weight: Int!
}

type OrderItem {
  product: Product!
  id: Int!
  quantity: Int!
  price: Float!
  orderId: Int!
  order: Order
}

type Product {
  id: ID!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  orderById(id: ID!): Order @lookup @cost(weight: "10")
  userById(id: ID!): User! @lookup @internal
}

type User {
  id: ID!
}

input CreateOrderInput {
  userId: ID!
  items: [OrderItemInput!]!
  weight: Int!
}

input OrderItemInput {
  productId: ID!
  quantity: Int!
  price: Float!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

directive @internal on OBJECT | FIELD_DEFINITION

"""
The @lookup directive is used within a source schema to specify output fields
that can be used by the distributed GraphQL executor to resolve an entity by
a stable key.
"""
directive @lookup on FIELD_DEFINITION