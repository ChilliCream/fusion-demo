schema {
  query: Query
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type DeliveryEstimate {
  min: Int!
  max: Int!
}

type Product implements Node {
  deliveryEstimate(zip: String!): DeliveryEstimate!
  id: ID!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  productById(id: ID!): Product! @lookup @cost(weight: "10")
  shippingVersion: String! @cost(weight: "10")
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

directive @lookup on FIELD_DEFINITION