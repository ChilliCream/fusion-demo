schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CreateReviewPayload {
  review: Review
}

type Mutation {
  createReview(input: CreateReviewInput!): CreateReviewPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Product {
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ProductReviewsConnection
  id: ID!
}

"A connection to a list of items."
type ProductReviewsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductReviewsEdge!]
  "A flattened list of the nodes."
  nodes: [Review!]
}

"An edge in a connection."
type ProductReviewsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Review!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  reviewById(id: ID!): Review
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ReviewsConnection
  userById(id: ID!): User
  usersById(ids: [ID!]!): [User!]!
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): UsersConnection
  productById(id: ID!): Product!
}

type Review implements Node {
  id: ID!
  body: String!
  stars: Int!
  author: User!
  thisIsInternal: String! @tag(name: "internal")
  product: Product!
  fooBarBaz: String!
}

"A connection to a list of items."
type ReviewsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ReviewsEdge!]
  "A flattened list of the nodes."
  nodes: [Review!]
}

"An edge in a connection."
type ReviewsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Review!
}

type Subscription {
  onCreateReview: Review!
}

type User implements Node {
  id: ID!
  name: String!
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ReviewsConnection
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

input CreateReviewInput {
  body: String!
  stars: Int!
  productId: ID!
  authorId: ID!
}

directive @tag(name: String) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION